{"version":3,"sources":["logo.svg","sortingAlgorithms/sortingAlgorithms.js","SortingVisualizer/SortingVisualizer.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","getMergeSortAnimations","array","animations","length","auxiliaryArray","slice","mergeSortHelper","mainArray","startIdx","endIdx","middleIdx","Math","floor","k","i","j","push","doMerge","SortingVisualizer","props","state","this","resetArray","amount","min","max","random","setState","arrayBars","document","getElementsByClassName","isColorChange","console","log","barOneIdx","barTwoIdx","barOneStyle","style","barTwoStyle","color","setTimeout","backgroundColor","newHeight","height","swapped","tmp","newOneHeight","newTwoHeight","sleep","ms","Promise","resolve","className","map","value","idx","key","onClick","mergeSort","bubbleSort","for","type","id","name","getElementById","fontSize","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.dd4650b6.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","export function getMergeSortAnimations(array) {\n    const animations = [];\n    if (array.length <= 1) return array;\n    const auxiliaryArray = array.slice();\n    mergeSortHelper(array, 0, array.length - 1, auxiliaryArray, animations);\n    return animations;\n  }\n  \n  function mergeSortHelper(\n    mainArray,\n    startIdx,\n    endIdx,\n    auxiliaryArray,\n    animations,\n  ) {\n\n    if (startIdx === endIdx) return;\n    const middleIdx = Math.floor((startIdx + endIdx) / 2);\n    mergeSortHelper(auxiliaryArray, startIdx, middleIdx, mainArray, animations);\n    mergeSortHelper(auxiliaryArray, middleIdx + 1, endIdx, mainArray, animations);\n    doMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations);\n  }\n  \n  function doMerge(\n    mainArray,\n    startIdx,\n    middleIdx,\n    endIdx,\n    auxiliaryArray,\n    animations,\n  ) {\n    let k = startIdx;\n    let i = startIdx;\n    let j = middleIdx + 1;\n    while (i <= middleIdx && j <= endIdx) {\n      // These are the values that we're comparing; we push them once\n      // to change their color.\n      animations.push([i, j]);\n      // These are the values that we're comparing; we push them a second\n      // time to revert their color.\n      animations.push([i, j]);\n\n\n\n      if (auxiliaryArray[i] <= auxiliaryArray[j]) {\n        // We overwrite the value at index k in the original array with the\n        // value at index i in the auxiliary array.\n        animations.push([k, auxiliaryArray[i]]);\n        mainArray[k++] = auxiliaryArray[i++];\n      } else {\n        // We overwrite the value at index k in the original array with the\n        // value at index j in the auxiliary array.\n        animations.push([k, auxiliaryArray[j]]);\n        mainArray[k++] = auxiliaryArray[j++];\n      }\n    }\n    while (i <= middleIdx) {\n      // These are the values that we're comparing; we push them once\n      // to change their color.\n      animations.push([i, i]);\n      // These are the values that we're comparing; we push them a second\n      // time to revert their color.\n      animations.push([i, i]);\n      // We overwrite the value at index k in the original array with the\n      // value at index i in the auxiliary array.\n      animations.push([k, auxiliaryArray[i]]);\n      mainArray[k++] = auxiliaryArray[i++];\n    }\n    while (j <= endIdx) {\n      // These are the values that we're comparing; we push them once\n      // to change their color.\n      animations.push([j, j]);\n      // These are the values that we're comparing; we push them a second\n      // time to revert their color.\n      animations.push([j, j]);\n      // We overwrite the value at index k in the original array with the\n      // value at index j in the auxiliary array.\n      animations.push([k, auxiliaryArray[j]]);\n      mainArray[k++] = auxiliaryArray[j++];\n    }\n  }","import React from 'react';\nimport {getMergeSortAnimations} from '../sortingAlgorithms/sortingAlgorithms.js';\nimport {getBubbleSortAnimations} from '../sortingAlgorithms/bubbleSort.js';\nimport './SortingVisualizer.css';\n\n// Change this value for the speed of the animations.\nconst ANIMATION_SPEED_MS = 1;\n\n// Change this value for the number of bars (value) in the array.\nvar NUMBER_OF_ARRAY_BARS = 310; // 310\n\n// This is the main color of the array bars.\nconst PRIMARY_COLOR = 'black';\n\n// This is the color of array bars that are being compared throughout the animations.\nconst SECONDARY_COLOR = 'red';\n\nexport default class SortingVisualizer extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      array: [],\n    };\n  }\n\n  componentDidMount() {\n    this.resetArray(NUMBER_OF_ARRAY_BARS);\n  }\n\n  resetArray(amount) {\n    const array = [];\n    for (let i = 0; i < amount; i++) {\n      array.push(randomIntFromInterval(5, 730));\n    }\n    this.setState({array});\n  }\n\n  mergeSort() {\n    const animations = getMergeSortAnimations(this.state.array);\n\n    for (let i = 0; i < animations.length; i++) {\n      const arrayBars = document.getElementsByClassName('array-bar');\n      const isColorChange = i % 3 !== 2;\n\n      console.log(animations[i])\n      if (isColorChange) {\n        const [barOneIdx, barTwoIdx] = animations[i];\n\n        const barOneStyle = arrayBars[barOneIdx].style;\n        const barTwoStyle = arrayBars[barTwoIdx].style;\n        const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\n        setTimeout(() => {\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = color;\n        }, i * ANIMATION_SPEED_MS);\n\n      } else {\n        setTimeout(() => {\n          const [barOneIdx, newHeight] = animations[i];\n\n\n          const barOneStyle = arrayBars[barOneIdx].style;\n          barOneStyle.height = `${newHeight}px`;\n        }, i * ANIMATION_SPEED_MS);\n      }\n    }\n  }\n\n  /*quickSort() {\n    // We leave it as an exercise to the viewer of this code to implement this method.\n  }\n\n  heapSort() {\n    // We leave it as an exercise to the viewer of this code to implement this method.\n  }*/\n\n  async bubbleSort() {\n    //const animations = getBubbleSortAnimations(this.state.array);\n    const arrayBars = document.getElementsByClassName('array-bar');\n    let swapped = true\n    let barOneStyle = arrayBars[0].style;\n    let barTwoStyle = arrayBars[1].style;\n\n    while (swapped) {\n         swapped = false\n\n        for (let i = 0; i < this.state.array.length; i++) {\n\n      \n\n            if (this.state.array[i] > this.state.array[i + 1]) {\n              \n               \n                barOneStyle.backgroundColor = PRIMARY_COLOR;\n                barTwoStyle.backgroundColor = PRIMARY_COLOR;\n               \n               swapped = true\n\n\n\n                let tmp = this.state.array[i];\n                this.state.array[i] = this.state.array[i + 1];\n                this.state.array[i + 1] = tmp;\n                let newOneHeight = this.state.array[i]\n                let newTwoHeight = this.state.array[i+1]\n                \n\n\n                barOneStyle = arrayBars[i].style;\n                barTwoStyle = arrayBars[i+1].style;\n\n                barOneStyle.backgroundColor = SECONDARY_COLOR;\n                barTwoStyle.backgroundColor = SECONDARY_COLOR;\n                barOneStyle.height = `${newOneHeight}px`;\n                barTwoStyle.height = `${newTwoHeight}px`;\n                \n                await this.sleep(ANIMATION_SPEED_MS )\n\n            }\n          \n        }\n    }\n\n\n    barOneStyle.backgroundColor = PRIMARY_COLOR;\n    barTwoStyle.backgroundColor = PRIMARY_COLOR;\n\n  }\n\n  sleep(ms) {\n    return new Promise(resolve => setTimeout(resolve, ms));\n  }\n/*\n  // NOTE: This method will only work if your sorting algorithms actually return\n  // the sorted arrays; if they return the animations (as they currently do), then\n  // this method will be broken.\n  testSortingAlgorithms() {\n    for (let i = 0; i < 100; i++) {\n      const array = [];\n      const length = randomIntFromInterval(1, 1000);\n      for (let i = 0; i < length; i++) {\n        array.push(randomIntFromInterval(-1000, 1000));\n      }\n      const javaScriptSortedArray = array.slice().sort((a, b) => a - b);\n      const mergeSortedArray = getMergeSortAnimations(array.slice());\n      console.log(arraysAreEqual(javaScriptSortedArray, mergeSortedArray));\n    }\n  }*/\n\n  render() {\n    const {array} = this.state;\n\n    return (\n      <div className=\"array-container\">\n        {array.map((value, idx) => (\n          <div\n            className=\"array-bar\"\n            key={idx}\n            style={{\n              backgroundColor: PRIMARY_COLOR,\n              height: `${value}px`,\n            }}></div>\n        ))}\n        <button onClick={() => this.resetArray(NUMBER_OF_ARRAY_BARS)}>Generate New Array</button>\n        <button onClick={() => this.mergeSort()}>Begin Merge Sort</button>\n        <button onClick={() => this.bubbleSort()}>Begin Bubble Sort</button><br></br><br></br>\n        <label for=\"size\">Array Size:   </label>\n        <input type=\"text\" id=\"size\" name=\"Size\"></input>\n        <button onClick={() => this.resetArray(document.getElementById(\"size\").value)}>Confirm</button>\n        <p style={{ fontSize: 15 }}>{\"Soham Parmar\"}</p>\n      </div>\n    );\n  }\n}\n\n// From https://stackoverflow.com/questions/4959975/generate-random-number-between-two-numbers-in-javascript\nfunction randomIntFromInterval(min, max) {\n  // min and max included\n  return Math.floor(Math.random() * (max - min + 1) + min);\n}\n\nfunction arraysAreEqual(arrayOne, arrayTwo) {\n  if (arrayOne.length !== arrayTwo.length) return false;\n  for (let i = 0; i < arrayOne.length; i++) {\n    if (arrayOne[i] !== arrayTwo[i]) {\n      return false;\n    }\n  }\n  return true;\n}","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport SortingVisualizer from './SortingVisualizer/SortingVisualizer';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <p>If you cannot see controls, scroll down.</p>\n      <SortingVisualizer></SortingVisualizer>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}